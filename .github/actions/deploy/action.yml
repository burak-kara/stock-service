name: 'Deploy'
description: 'Deploy the project to AWS Lambda'
branding:
  icon: 'settings'
  color: 'green'

inputs:
  branch-name:
    description: 'Branch name'
    required: true
  database-url:
    description: 'Database URL'
    required: true
  serverless-access-key:
    description: 'Serverless Access Key'
    required: true
  slack-web-hook:
    description: 'Slack WebHook URL'
    required: true
  slack-channel-name:
    description: 'Slack channel name'
    required: true
  host:
    description: 'HOST'
    required: true
  port:
    description: 'PORT'
    required: true
  min-device-id-length:
    description: 'Min device ID length'
    required: true
  max-device-id-length:
    description: 'Max device ID length'
    required: true
  min-amount:
    description: 'Min amount'
    required: true
  max-amount:
    description: 'Max amount'
    required: true
  min-vendor-id-length:
    description: 'Min vendor ID length'
    required: true
  max-vendor-id-length:
    description: 'Max vendor ID length'
    required: true
  min-product-id-length:
    description: 'Min product ID length'
    required: true
  max-product-id-length:
    description: 'Max product ID length'
    required: true
  order-amount:
    description: 'Order amount'
    required: true
  softener-threshold:
    description: 'Softener threshold'
    required: true
  detergent-threshold:
    description: 'Detergent threshold'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Use Node.js ${{ matrix.node-version }}'
      uses: actions/setup-node@v3
      with:
        node-version: '${{ matrix.node-version }}'
        cache: 'yarn'

    - uses: docker/setup-buildx-action@v2
      id: buildx
      with:
        install: true

    - name: Docker Build
      shell: bash
      run: |
        docker build .
      env:
        DATABASE_URL: ${{ inputs.database-url }}

    - name: Serverless Deploy
      uses: serverless/github-action@v3.1
      with:
        args: -c "serverless plugin install --name serverless-offline && serverless deploy"
        entrypoint: /bin/sh
      env:
        DATABASE_URL: ${{ inputs.database-url }}
        HOST: ${{ inputs.host }}
        PORT: ${{ inputs.port }}

        MIN_DEVICE_ID_LENGTH: ${{ inputs.min-device-id-length }}
        MAX_DEVICE_ID_LENGTH: ${{ inputs.max-device-id-length }}
        MIN_AMOUNT: ${{ inputs.min-amount }}
        MAX_AMOUNT: ${{ inputs.max-amount }}
        MIN_VENDOR_ID_LENGTH: ${{ inputs.min-vendor-id-length }}
        MAX_VENDOR_ID_LENGTH: ${{ inputs.max-vendor-id-length }}
        MIN_PRODUCT_ID_LENGTH: ${{ inputs.min-product-id-length }}
        MAX_PRODUCT_ID_LENGTH: ${{ inputs.max-product-id-length }} }
        ORDER_AMOUNT: ${{ inputs.order-amount }}
        SOFTENER_THRESHOLD: ${{ inputs.softener-threshold }}
        DETERGENT_THRESHOLD: ${{ inputs.detergent-threshold }}

        SERVERLESS_ACCESS_KEY: ${{ inputs.serverless-access-key }}

    - name: Notify Slack on Success
      if: ${{ success() }}
      uses: ./.github/actions/slack-notifier
      with:
        action-status: ${{ job.status }}
        slack-web-hook: ${{ inputs.slack-web-hook }}
        slack-channel-name: ${{ inputs.slack-channel-name }}
        title: 'Deploy Success :pass:'
        message: 'Deploy on ${{ inputs.branch-name }} succeeded :pass: :fireparrot: :sheepy:'

    - name: Notify Slack on Failure
      if: ${{ failure() }}
      uses: ./.github/actions/slack-notifier
      with:
        action-status: ${{ job.status }}
        slack-web-hook: ${{ inputs.slack-web-hook }}
        slack-channel-name: ${{ inputs.slack-channel-name }}
        title: 'Deploy Failed :fail:'
        message: 'Deploy on ${{ inputs.branch-name }} failed :fail: :terror: :alert:'
